/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace SharpOTP.Remote.Messaging
{

  [Serializable]
  public partial class Message : TBase
  {
    private Actions _Action;
    private string _MethodName;
    private byte[] _Payload;
    private RemotingException _Exception;
    private string _To;
    private string _ReplyTo;
    private long _CorrentionId;
    private List<byte[]> _ListPayload;

    public Actions Action
    {
      get
      {
        return _Action;
      }
      set
      {
        __isset.Action = true;
        this._Action = value;
      }
    }

    public string MethodName
    {
      get
      {
        return _MethodName;
      }
      set
      {
        __isset.MethodName = true;
        this._MethodName = value;
      }
    }

    public byte[] Payload
    {
      get
      {
        return _Payload;
      }
      set
      {
        __isset.Payload = true;
        this._Payload = value;
      }
    }

    public RemotingException Exception
    {
      get
      {
        return _Exception;
      }
      set
      {
        __isset.Exception = true;
        this._Exception = value;
      }
    }

    public string To
    {
      get
      {
        return _To;
      }
      set
      {
        __isset.To = true;
        this._To = value;
      }
    }

    public string ReplyTo
    {
      get
      {
        return _ReplyTo;
      }
      set
      {
        __isset.ReplyTo = true;
        this._ReplyTo = value;
      }
    }

    public long CorrentionId
    {
      get
      {
        return _CorrentionId;
      }
      set
      {
        __isset.CorrentionId = true;
        this._CorrentionId = value;
      }
    }

    public List<byte[]> ListPayload
    {
      get
      {
        return _ListPayload;
      }
      set
      {
        __isset.ListPayload = true;
        this._ListPayload = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool Action;
      public bool MethodName;
      public bool Payload;
      public bool Exception;
      public bool To;
      public bool ReplyTo;
      public bool CorrentionId;
      public bool ListPayload;
    }

    public Message() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 2:
            if (field.Type == TType.I32) {
              Action = (Actions)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              MethodName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Payload = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Exception = new RemotingException();
              Exception.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              To = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              ReplyTo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              CorrentionId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                ListPayload = new List<byte[]>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  byte[] _elem2 = null;
                  _elem2 = iprot.ReadBinary();
                  ListPayload.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Message");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Action) {
        field.Name = "Action";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Action);
        oprot.WriteFieldEnd();
      }
      if (MethodName != null && __isset.MethodName) {
        field.Name = "MethodName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MethodName);
        oprot.WriteFieldEnd();
      }
      if (Payload != null && __isset.Payload) {
        field.Name = "Payload";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Payload);
        oprot.WriteFieldEnd();
      }
      if (Exception != null && __isset.Exception) {
        field.Name = "Exception";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Exception.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (To != null && __isset.To) {
        field.Name = "To";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(To);
        oprot.WriteFieldEnd();
      }
      if (ReplyTo != null && __isset.ReplyTo) {
        field.Name = "ReplyTo";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ReplyTo);
        oprot.WriteFieldEnd();
      }
      if (__isset.CorrentionId) {
        field.Name = "CorrentionId";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CorrentionId);
        oprot.WriteFieldEnd();
      }
      if (ListPayload != null && __isset.ListPayload) {
        field.Name = "ListPayload";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ListPayload.Count));
          foreach (byte[] _iter3 in ListPayload)
          {
            oprot.WriteBinary(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Message(");
      sb.Append("Action: ");
      sb.Append(Action);
      sb.Append(",MethodName: ");
      sb.Append(MethodName);
      sb.Append(",Payload: ");
      sb.Append(Payload);
      sb.Append(",Exception: ");
      sb.Append(Exception== null ? "<null>" : Exception.ToString());
      sb.Append(",To: ");
      sb.Append(To);
      sb.Append(",ReplyTo: ");
      sb.Append(ReplyTo);
      sb.Append(",CorrentionId: ");
      sb.Append(CorrentionId);
      sb.Append(",ListPayload: ");
      sb.Append(ListPayload);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
